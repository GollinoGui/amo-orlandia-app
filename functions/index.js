const { onRequest } = require('firebase-functions/v2/https');
const emailService = require('./emailService');

// üîß CORS simples e direto
const setCorsHeaders = (res) => {
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type');
};

// üè• HEALTH CHECK
exports.health = onRequest((req, res) => {
  setCorsHeaders(res);
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  res.json({ message: 'API ativa', timestamp: new Date().toISOString() });
});

// ü™ë FORMUL√ÅRIO DE RESERVA
exports.enviarFormularioReserva = onRequest(async (req, res) => {
  setCorsHeaders(res);
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  try {
    console.log('ü™ë [RESERVA] Iniciando processamento...');
    console.log('üì• [RESERVA] Body recebido:', req.body);
    
    const { nome, telefone, telefoneContato, endereco, diasEspera, aptoDoacao } = req.body;
    
    // Valida√ß√£o
    if (!nome || !telefone || !endereco || !diasEspera || !aptoDoacao) {
      console.error('‚ùå [RESERVA] Campos obrigat√≥rios faltando');
      return res.status(400).json({
        success: false,
        message: 'Campos obrigat√≥rios n√£o preenchidos'
      });
    }
    
    // Preparar dados
    const emailData = {
      nome,
      telefone,
      telefoneContato: telefoneContato || null,
      endereco,
      diasEspera,
      aptoDoacao
    };
    
    console.log('üìß [RESERVA] Enviando email...');
    const sucesso = await emailService.enviarFormularioReserva(emailData);
    
    if (sucesso) {
      console.log('‚úÖ [RESERVA] Email enviado com sucesso');
      return res.json({
        success: true,
        message: 'Formul√°rio de reserva enviado com sucesso!'
      });
    } else {
      console.error('‚ùå [RESERVA] Falha no envio do email');
      return res.status(500).json({
        success: false,
        message: 'Erro ao enviar formul√°rio. Tente novamente.'
      });
    }
    
  } catch (error) {
    console.error('‚ùå [RESERVA] Erro:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// üìû FORMUL√ÅRIO DE CONTATO
exports.enviarFormularioContato = onRequest(async (req, res) => {
  setCorsHeaders(res);
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  try {
    console.log('üìû [CONTATO] Iniciando processamento...');
    console.log('üì• [CONTATO] Body recebido:', req.body);
    
    const { nome, telefone, email, mensagem, assunto } = req.body;
    
    // Valida√ß√£o
    if (!nome || !telefone || !mensagem) {
      console.error('‚ùå [CONTATO] Campos obrigat√≥rios faltando');
      return res.status(400).json({
        success: false,
        message: 'Campos obrigat√≥rios: nome, telefone e mensagem'
      });
    }
    
    // Preparar dados
    const emailData = {
      nome,
      telefone,
      email: email || null,
      mensagem,
      assunto: assunto || 'Contato Geral'
    };
    
    console.log('üìß [CONTATO] Enviando email...');
    const sucesso = await emailService.enviarFormularioContato(emailData);
    
    if (sucesso) {
      console.log('‚úÖ [CONTATO] Email enviado com sucesso');
      return res.json({
        success: true,
        message: 'Mensagem enviada com sucesso!'
      });
    } else {
      console.error('‚ùå [CONTATO] Falha no envio do email');
      return res.status(500).json({
        success: false,
        message: 'Erro ao enviar mensagem. Tente novamente.'
      });
    }
    
  } catch (error) {
    console.error('‚ùå [CONTATO] Erro:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// ü§ù FORMUL√ÅRIO DE ASSOCIA√á√ÉO
exports.enviarFormularioAssociacao = onRequest(async (req, res) => {
  setCorsHeaders(res);
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  try {
    console.log('ü§ù [ASSOCIACAO] Iniciando processamento...');
    console.log('üì• [ASSOCIACAO] Body recebido:', req.body);
    
    const {
      nomeCompleto,
      dataNascimento,
      telefone,
      email,
      enderecoCompleto,
      profissao,
      motivoAssociacao,
      comoConheceu
    } = req.body;
    
    // Valida√ß√£o
    if (!nomeCompleto || !dataNascimento || !telefone || !email || 
        !enderecoCompleto || !profissao || !motivoAssociacao || !comoConheceu) {
      console.error('‚ùå [ASSOCIACAO] Campos obrigat√≥rios faltando');
      return res.status(400).json({
        success: false,
        message: 'Todos os campos s√£o obrigat√≥rios'
      });
    }
    
    // Preparar dados
    const emailData = {
      nomeCompleto,
      dataNascimento,
      telefone,
      email,
      enderecoCompleto,
      profissao,
      motivoAssociacao,
      comoConheceu
    };
    
    console.log('üìß [ASSOCIACAO] Enviando email...');
    const sucesso = await emailService.enviarFormularioAssociacao(emailData);
    
    if (sucesso) {
      console.log('‚úÖ [ASSOCIACAO] Email enviado com sucesso');
      return res.json({
        success: true,
        message: 'Formul√°rio de associa√ß√£o enviado com sucesso!'
      });
    } else {
      console.error('‚ùå [ASSOCIACAO] Falha no envio do email');
      return res.status(500).json({
        success: false,
        message: 'Erro ao enviar formul√°rio. Tente novamente.'
      });
    }
    
  } catch (error) {
    console.error('‚ùå [ASSOCIACAO] Erro:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// üö® FORMUL√ÅRIO DE DEN√öNCIA (Multipart/Form-Data)
const Busboy = require('busboy');
const os = require('os');
const path = require('path');
const fs = require('fs');

exports.enviarFormularioDenuncia = onRequest((req, res) => {
  setCorsHeaders(res);
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  console.log('üö® [DENUNCIA] Iniciando processamento...');
  console.log('üì• [DENUNCIA] Headers:', req.headers);
  console.log('üì• [DENUNCIA] Content-Type:', req.headers['content-type']);
  
  const busboy = new Busboy({ headers: req.headers });
  const fields = {};
  const files = [];
  
  // Processar campos de texto
  busboy.on('field', (fieldname, value, fieldnameTruncated, valueTruncated, encoding, mimetype) => {
    console.log(`üìù [DENUNCIA] Campo recebido: ${fieldname} = ${value}`);
    fields[fieldname] = value;
  });
  
  // Processar arquivos
  busboy.on('file', (fieldname, file, filename, encoding, mimetype) => {
    console.log(`üì∏ [DENUNCIA] Arquivo: ${fieldname}, nome: ${filename}, tipo: ${mimetype}`);
    
    if (filename && filename !== 'blob') {
      const saveTo = path.join(os.tmpdir(), `${Date.now()}-${filename}`);
      const writeStream = fs.createWriteStream(saveTo);
      file.pipe(writeStream);
      
      files.push({
        fieldname,
        filepath: saveTo,
        filename,
        mimetype
      });
    } else {
      file.resume(); // Descartar arquivo inv√°lido
    }
  });
  
  // Finalizar processamento
  busboy.on('finish', async () => {
    console.log('‚úÖ [DENUNCIA] Busboy finalizado');
    console.log('üìù [DENUNCIA] Campos recebidos:', Object.keys(fields));
    console.log('üìù [DENUNCIA] Valores dos campos:', fields);
    console.log('üì∏ [DENUNCIA] Arquivos:', files.length);
    
    try {
      const { tipo, descricao, endereco, nomeCompleto, telefone, email, latitude, longitude } = fields;
      
      // Log detalhado dos campos
      console.log('üîç [DENUNCIA] Verificando campos:');
      console.log('- tipo:', tipo);
      console.log('- descricao:', descricao);
      console.log('- endereco:', endereco);
      console.log('- nomeCompleto:', nomeCompleto);
      console.log('- telefone:', telefone);
      console.log('- email:', email);
      
      // Valida√ß√£o
      if (!tipo || !descricao || !endereco || !nomeCompleto || !telefone || !email) {
        console.error('‚ùå [DENUNCIA] Campos obrigat√≥rios faltando');
        console.error('‚ùå [DENUNCIA] Campos recebidos:', fields);
        return res.status(400).json({
          success: false,
          message: 'Campos obrigat√≥rios: tipo, descri√ß√£o, endere√ßo, nome, telefone e email',
          debug: {
            camposRecebidos: Object.keys(fields),
            valores: fields
          }
        });
      }
      
      // Preparar coordenadas
      let coordenadas = null;
      if (latitude && longitude) {
        coordenadas = {
          latitude: parseFloat(latitude),
          longitude: parseFloat(longitude)
        };
      }
      
      // Preparar dados
      const emailData = {
        tipo,
        descricao,
        endereco,
        nomeCompleto,
        telefone,
        email,
        coordenadas,
        fotos: files.map(f => f.filepath)
      };
      
      console.log('üìß [DENUNCIA] Enviando email...');
      const sucesso = await emailService.enviarFormularioDenuncia(emailData);
      
      // Limpar arquivos tempor√°rios
      for (const file of files) {
        try {
          fs.unlinkSync(file.filepath);
        } catch (err) {
          console.warn('‚ö†Ô∏è [DENUNCIA] Erro ao limpar arquivo:', err);
        }
      }
      
      if (sucesso) {
        console.log('‚úÖ [DENUNCIA] Email enviado com sucesso');
        return res.json({
          success: true,
          message: 'Den√∫ncia enviada com sucesso!'
        });
      } else {
        console.error('‚ùå [DENUNCIA] Falha no envio do email');
        return res.status(500).json({
          success: false,
          message: 'Erro ao enviar den√∫ncia. Tente novamente.'
        });
      }
      
    } catch (error) {
      console.error('‚ùå [DENUNCIA] Erro:', error);
      return res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  });
  
  busboy.on('error', (error) => {
    console.error('‚ùå [DENUNCIA] Erro no Busboy:', error);
    return res.status(500).json({
      success: false,
      message: 'Erro ao processar formul√°rio'
    });
  });
  
  // Processar requisi√ß√£o
  req.pipe(busboy);
});